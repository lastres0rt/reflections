WHAT HAPPENS WHEN YOU INITIALIZE A REPOSITORY? WHY DO YOU NEED TO DO IT?

When a repository is initialized, it creates all of the underlying infrastructure you need to begin keeping track of commits and changes to a git repository. However, it doesn't contain any of the files that repository is designed to keep track of -- just the basic layout. It needs to be initialized so the structure is there for when the first commits are made and so there isn't a huge amount of overhead for that initial commit when it comes to "making the first commit" to a new repository.

-----

HOW IS THE STAGING AREA DIFFERENT FROM THE WORKING DIRECTORY AND THE REPOSITORY? WHAT VALUE DO YOU THINK IT OFFERS?

The "Staging Area" is an in-between point between the repository and the working directory, by allowing you to specify which files in the working directory need to be added to this particular commit (rather than just adding all the files in a given directory). This means that the Staging Area provides an added degree of control over what goes into the repository each time.

----

Holy cats, I found an error in the Udacity Course Notes! Making this change to see if I fixed the error: 

http://remotemanifesto.com/productivity/2014/01/31/git-commit-messages-in-sublime-after-textmate.html

... no, that didn't work.

I'm just going to have to -m "Comment" all my commits until I can find a solution to this.

----

HOW CAN YOU USE THE STAGING AREA TO MAKE SURE YOU HAVE ONE COMMIT PER LOGICAL CHANGE?

By using the staging area, it forces you to decide which files do and don't need to be added in order to make a "logical change". It can also prevent you from committing files that aren't ready yet.

----

WHAT ARE SOME SITUATIONS WHEN BRANCHES WOULD BE HELPFUL IN KEEPING YOUR HISTORY ORGANIZED? HOW WOULD BRANCHES HELP?

Branches make sense when making changes that shouldn't be committed to the master branch, at least not right away -- because the changes are experimental or otherwise dramatically different from the original (such as adding new features or a different mode of the software) that it makes sense to seperate them from the rest of the changes being made.

----

HOW DO THE DIAGRAMS HELP YOU VISUALIZE THE BRANCH STRUCTURE?

Diagrams help visualize just how much work has been done at various points of the process and how "far back" they diverged from the original master branch. It's useful for seeing just how different certain variants are from the master branch, especially when merging branches back in later on.

-----

WHAT IS THE RESULT OF MERGING TWO BRANCHES TOGETHER? WHY DO WE REPRESENT IT IN THE DIAGRAM THE WAY WE DO?

The result of merging two branches together is that the merging software removes whatever was originally removed, adds what was added, and retains whatever stayed the same, and also makes the new merged branch the new head of those two branches (which complicates looking back at the old work, but can still be done using "git show" rather than just comparing based on timestamps). It's represented in the diagram the way we do it because the timelines of those two branches still exist, but they've now been combined to continue in just one timeline.

----

WHAT ARE THE PROS AND CONS OF GITâ€™S AUTOMATIC MERGING VS. ALWAYS DOING MERGES MANUALLY?

While automatic merging allows you to quickly merge two branches and continue onward, manual merging ensures that everything is seen by human eyes to prevent erratic changes in a file that might render it unusable.
