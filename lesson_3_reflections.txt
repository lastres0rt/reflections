WHEN WOULD YOU WANT TO USE A REMOTE REPOSITORY RATHER THAN KEEPING ALL YOUR WORK LOCAL?

Having a local repository makes sense if you're sharing code between multiple machines (even if it's as simple as working between your iPad and your laptop) or multiple users in an organization or a company. In addition, for resume and portfolio purposes, having a remote repository allows you to show off your code for review by others!

-----

WHY MIGHT YOU WANT TO ALWAYS PULL CHANGES MANUALLY RATHER THAN HAVING GIT AUTOMATICALLY STAY UP-TO-DATE WITH YOUR REMOTE REPOSITORY?

Manual pulls might be annoying, but the assumption is that whatever version you have in your remote repository is the version you want people to see (or pull from, if they're cohorts). Just because you've been working on a project doesn't mean that your version perfectly matches what's in the remote repository, and vice versa. Pulling changes when you're still working on something important might mean things get wiped out if you've been working on new features.

-----

DESCRIBE THE DIFFERENCES BETWEEN FORKS, CLONES, AND BRANCHES. WHEN WOULD YOU USE ONE INSTEAD OF ANOTHER?

A FORK: a copy of someone else's repository on GitHub where you've duplicated and deviated your work from theirs so you can work on it and alter it without affecting their version of the work. A fork is similar to a branch in that it deviates from the original repository, but forks are used on repositories not under your control. Forking is specific to GitHub (or at least much more difficult to do without it), while cloning and branching can be done locally.

A CLONE: a copy of an already-existing repository that doesn't require any changes in permissions (often onto your own machine so you can use and alter the code locally). You can clone other people's repositories, but you can't push your changes to their repositories on GitHub without permission. (You can also clone your own repositories, either to another location on your computer or from your own GitHub repo). 

A BRANCH: an "alternative" timeline of commits that allow you to develop experimental features or settings independent of the repository's main timeline. Branches exist inside repositories, but they allow for multiple simultaneous "heads" in the same way forking and cloning allows for multiple heads to exist. 

-----

WHAT IS THE BENEFIT OF HAVING A COPY OF THE LAST KNOWN STATE OF THE REMOTE STORED LOCALLY?

When dealing with changes between a local repo or a branch and the master, it can be useful to go ahead and store the last known state of the remote locally so you can merge to it without overwriting either by accident or causing conflicts. Also, if you're going to be offline for some time, having a local copy of the repo means you can work on it at any point between when you've fetched it and when you'll be available online again -- even if it's changed in that time frame, it'll be much easier to merge changes if you've already taken an earlier state of the merge into account.

-----

HOW WOULD YOU COLLABORATE WITHOUT USING GIT OR GITHUB? WHAT WOULD BE EASIER, AND WHAT WOULD BE HARDER?

Without using git or github, there would need to be some form of version control, and likely it would need to be something that everyone involved can agree upon -- something like Dropbox or emailing, which would also have the benefit of keeping track of files and/or making sure we're all sharing the same code.

It would be easier in that everyone would know what they're doing, but harder in that the changes might not make sense, or differing versions would be harder to keep track of and merge together, and possibly someone would have the most 'up to date' version while the rest of us don't, and waiting on them to propagate the changes would cost time.

Git and GitHub might be tricky to use at first, but at least you can be reasonably certain there's a working version of the code somewhere in there when you go to fetch it.

-----

WHEN WOULD YOU WANT TO MAKE CHANGES IN A SEPARATE BRANCH RATHER THAN DIRECTLY IN MASTER? WHAT BENEFITS DOES EACH APPROACH HAVE?

Making changes in a seperate branch allows you to work independently on a project with other people -- since there's a certain level of expectation that the master branch remain functional, this process removes the likelihood that unknown (and unwanted) changes will occur in master.

However, it also adds a level of bureaucracy that may make collaboration difficult (especially if someone else is needed to give their permission in order to make changes) -- while it's possible to fork in order to prevent someone from completely preventing you from working on a certain piece of code, larger companies and certain open-source projects may suffer as a result if people are unwilling to work with each other. (This is a known issue with larger projects where it can be increasingly difficult to collaborate on a project, especially for newcomers.)